/*
 * Copyright (C) 2010-2011  George Parisis and Dirk Trossen
 * All rights reserved.
 * TCLAP and PlanetLab support By Dimitris Syrivelis
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 as published by the Free Software Foundation.
 *
 * Alternatively, this software may be distributed under the terms of
 * the BSD license.
 *
 * See LICENSE and COPYING for more details.
 */

#include "network.hpp"
#include "graph_representation.hpp"
#include "parser.hpp"
#include <tclap/CmdLine.h>

using namespace std;

int
main (int argc, char **argv)
{

  int ret;

  string filename;
  string outfilename;

  /**parse command line block based on TCLAP (template lib)
   */
  try
  {
    TCLAP::CmdLine cmd ("BlackAdder PlanetLab Configuration Building Tool ", ' ', "0.1");
    TCLAP::ValueArg<std::string> configfileArg ("c", "configfile", "Configuration file that contains graph attributes OR describes a graph (when -a is not used)", true, "homer", "string");
    TCLAP::ValueArg<std::string> outfileArg ("o", "outfile", "Output file for the configuration deployment tool", true, "None", "string");

    cmd.add (configfileArg);
    cmd.add (outfileArg);

    cmd.parse (argc, argv);
    /**get config filename. This is mandatory argument so we can skip existence check
     */
    filename = configfileArg.getValue ();
    /** check if autogenerate flag was set
     */
    outfilename = outfileArg.getValue ();

  }
  catch (TCLAP::ArgException &e)
  /**catch any command parsing exceptions
   */
  {
    std::cerr << "error: " << e.error () << " for arg " << e.argId () << std::endl;
  }

  /* create an empty network representation */
  Domain pdm = Domain ();
  /* create a parser object. the configuration file and the network domain are the parameters */
  Parser parserp (((char *) filename.c_str ()), &pdm);
  /* build PlanetLab Domain out of the planetlab available node file input */
  ret = parserp.buildPlanetLabDomain ();
  /* global domain parameteres should be explicitly called at this stage */
  ret = parserp.getGlobalDomainParameters ();
  /* check for errors */
  if (ret < 0)
  {
    cout << "Something went wrong" << endl;
    return EXIT_FAILURE;
  }
  /* create a graph representation of the network domain. An igraph instance will be now created using the Barabasi-Albert model */
  GraphRepresentation graphp = GraphRepresentation (&pdm, true);
  /* build the deployment tool internal representation so that click configuration file generation and deployment execution can be carried out by the same code with the non-autogenerated graph input */
  graphp.BuildInputMap ();
  graphp.ChooseTheBestTMRVNode ();
  /* write albert-barabasi autogenerated standard configuration file format */
  pdm.writeConfigFile (outfilename + ".cfg");
  /* calculate leaf Vertices */
  graphp.OutputLeafVertices (outfilename + ".edgevertices.cfg");

  return 0;
}
