/*
 * Copyright (C) 2010-2011  George Parisis and Dirk Trossen
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 as published by the Free Software Foundation.
 *
 * Alternatively, this software may be distributed under the terms of
 * the BSD license.
 *
 * See LICENSE and COPYING for more details.
 */

#ifndef NETWORK_HPP
#define	NETWORK_HPP

#include <iostream>
#include <cstdlib>
#include <string>
#include <vector>
#include <fstream>
#include <map>
#include <set>

#include "bitvector.hpp"

using namespace std;

class network_connection;
class network_node;
class ns3_application;
class ns3_application_attribute;

/**@brief (Deployment Application) a representation of a network domain as read from the configuration file.
 * 
 * It contains all network nodes with their connections.
 * 
 */
class network
{
public:
  /**
   * @brief constructor
   */
  network ();

  /**
   * @brief It prints an ugly representation of the Domain
   */
  void
  print_network ();
  /**
   * @brief -
   *
   */
  void
  assign_lids ();
  /**
   * @brief -
   *
   * @param LIDs
   * @param index
   */
  void
  calculate_lid (vector<Bitvector>& LIDs, int index);
  /**
   * @brief for each network node (and if the MAC address wasn't preassigned) it will ssh and learn the MAC address for all ethernet interfaces found in the configuration file. Also supports mac_ml overlay mode.
   *
   * @param no_remote If true, MAC address detection over SSH is not attempted.
   */
  void
  discover_mac_addresses (bool no_remote);
  /**@brief returns the testbed IP address (dotted decimal string) given a node label.
   *
   * @param label a node label
   * @return the testbed IP address (dotted decimal string)
   */
  string
  get_ip_from_label (string label);
  /**
   * @brief It locally creates and stores all Click/Blackadder configuration files for all network nodes (depending on the running mode). Also supports mac_ml overlay mode.
   *
   * @param montoolstub generate monitor tool counter stub or not
   */
  void
  write_click_conf (bool montoolstub, bool dump_supp);

  void
  write_ns3_click_conf ();
  /**
   * @brief Given a node label, it returns a pointer to the respective network_node.
   *
   * @param label a node label.
   * @return a pointer to a network_node.
   */
  network_node *
  find_node (string label);
  /**
   * @brief It copies the right Click/Blackadder configuration file to the right network node.
   */
  void
  scp_click_conf ();
  /**
   * @brief Copies the .graphml file to the right folder of the right network node.
   *
   * @param name the .graphml file name.
   */
  void
  scp_tm_conf (string name);
  /**
   * @brief It ssh'es network nodes, kills Click from user space and kernel space and runs Click in the correct mode (user ot kernel).
   */
  void
  start_click ();
  /**
   * @brief It starts the Topology Manager in the right network node (not implemented).
   */
  void
  start_tm ();
  /**
   * @brief Writes the standard deployment config file format to a file.
   *
   * Writes the standard deployment config file format to a file. It is used along with barabasi albert model because the graph is autogenerated and the experiment can be repeated.
   *
   */
  string
  write_config_file (string filename);
  /**
   * @brief for NS3 deployment - assigns device names to all devices in the topology (from eth0 to ethN)
   * Each connection will have a different ethernet interface
   */
  void
  assign_device_names_mac_addresses ();
  network_node *
  get_node (string label);
  string
  get_next_mac_address ();
  void
  create_ns3_code ();

  /**
   * @brief a vector containing all network_node
   */
  vector<network_node *> network_nodes;
  /**
   * @brief a pointer to a network_node that is the TopologyManager of the domain.
   */
  network_node *TM_node;
  /**@brief a pointer to a network_node that is the Rendezvous node of the domain.
   */
  network_node *RV_node;
  /**
   * @brief number of nodes in the domain.
   */
  unsigned int number_of_nodes;
  /**
   * @brief number of connections in the domain.
   */
  unsigned int number_of_connections;
  /**
   * @brief the length of an information identifier.
   */
  int ba_id_len;
  /**
   * @brief the length of a LIPSIN Identifier.
   */
  int fid_len;
  /**
   * @brief the full path of Click home.
   */
  string click_home;
  /**
   * @brief the full path where configuration files will be written.
   */
  string write_conf;
  /**
   * @brief the user using which deployment will remotely access network nodes.
   */
  string user;
  /**
   * @brief whether sudo will be used when executing remote commands.
   */
  bool sudo;
  /**
   * @brief the overlay mode. mac or ip
   */
  string overlay_mode;

  /*for NS3 deployment*/
  uint64_t id;
  /*It maps ethernet addresses to device variables' name in NS3*/
  map<string, string> address_to_device_name;
  /*a set that contains the NS3 devices already participating in a point to point connection - to avoid duplication of connections*/
  set<string> NS3devices_in_connections;
  map<string, string> label_to_node_name;
};

class network_node
{
public:
  network_connection *
  getConnection (string src_label, string dst_label);

  string testbed_ip; 		//read from configuration file
  string label; 		//read from configuration file
  string running_mode; 		//user or kernel
  string operating_system; 	//read from configuration file

  bool is_rv; 			//read from configuration file
  bool is_tm; 			//read from configuration file

  Bitvector internal_lid; 	//will be calculated
  Bitvector fid_to_rv; 		//will be calculated
  Bitvector fid_to_tm; 		//will be calculated

  vector<network_connection *> connections;

  /*for NS3 deployment*/
  int device_offset;
  vector<ns3_application *> applications;
};

class network_connection
{
public:
  string src_label; 		//read from configuration file
  string dst_label; 		//read from configuration file

  string src_if; 		//read from configuration file /*e.g. tap0 or eth1*/
  string dst_if; 		//read from configuration file /*e.g. tap0 or eth1*/

  string src_ip; 		//read from configuration file /*an IP address - i will not resolve mac addresses in this case*/
  string dst_ip; 		//read from configuration file /*an IP address - i will not resolve mac addresses in this case*/

  string src_mac; 		//will be retrieved using ssh
  string dst_mac; 		//will be retrieved using ssh

  Bitvector lid; 		//will be calculated

  /*NS3 related attributes*/
  int mtu;
  string rate;
  string delay;

  int priority; 		//link priority. If not there, t is set to 0 (default - BE)
  int rate_lim; 		//link rate limit for the bandwidth shaper. If not there is set to 10Gbps
};

class ns3_application
{
public:
  string name;
  string start;
  string stop;
  vector<ns3_application_attribute *> attributes;
};

class ns3_application_attribute
{
public:
  string name;
  string value;
};

#endif	/* NETWORK_HPP */
